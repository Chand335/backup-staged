<?php

namespace BackupStaged\Commands;

use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Symfony\Component\Process\Process;

class BackupStagedCommand extends Command
{
    protected $signature = 'git:backup-staged {--install-hook : Install a Git pre-commit hook that runs this command.}';

    protected $description = 'Back up staged Git files into a timestamped directory.';

    public function __construct(private readonly Filesystem $filesystem)
    {
        parent::__construct();
    }

    public function handle(): int
    {
        if ($this->option('install-hook')) {
            return $this->installHook();
        }

        $files = $this->getStagedFiles();

        if ($files->isEmpty()) {
            $this->info('No staged files detected. Nothing to back up.');

            return self::SUCCESS;
        }

        $timestampFormat = config('backup-staged.timestamp_format');
        $timestamp = now()->format($timestampFormat);
        $rootDirectory = $this->resolveRootDirectory();
        $targetDirectory = $rootDirectory.DIRECTORY_SEPARATOR.$timestamp;

        $this->ensureDirectoryExists($targetDirectory);

        $files->each(function (string $relativePath) use ($targetDirectory) {
            $sourcePath = base_path($relativePath);

            if (! $this->filesystem->exists($sourcePath)) {
                $this->warn("Skipping missing file: {$relativePath}");

                return;
            }

            $destinationPath = $targetDirectory.DIRECTORY_SEPARATOR.$relativePath;
            $destinationDirectory = dirname($destinationPath);
            $this->ensureDirectoryExists($destinationDirectory);

            $this->filesystem->copy($sourcePath, $destinationPath);
            $this->line("Backed up: {$relativePath}");
        });

        $this->info("Backup stored in: {$targetDirectory}");

        return self::SUCCESS;
    }

    private function getStagedFiles(): Collection
    {
        $process = new Process(['git', 'diff', '--cached', '--name-only']);
        $process->setWorkingDirectory(base_path());
        $process->run();

        if (! $process->isSuccessful()) {
            $this->error('Failed to retrieve staged files: '.$process->getErrorOutput());

            return collect();
        }

        return collect(preg_split('/\r?\n/', trim($process->getOutput())))->filter();
    }

    private function resolveRootDirectory(): string
    {
        $configuredRoot = (string) config('backup-staged.root');
        $normalised = Str::of($configuredRoot)
            ->replace(['\\', '/'], DIRECTORY_SEPARATOR)
            ->value();

        if ($this->isAbsolutePath($normalised)) {
            return $normalised;
        }

        return base_path($normalised);
    }

    private function isAbsolutePath(string $path): bool
    {
        return str_starts_with($path, DIRECTORY_SEPARATOR)
            || (strlen($path) > 1 && ctype_alpha($path[0]) && $path[1] === ':');
    }

    private function ensureDirectoryExists(string $path): void
    {
        if (! $this->filesystem->exists($path)) {
            $this->filesystem->makeDirectory($path, 0755, true);
        }
    }

    private function installHook(): int
    {
        $gitDirectory = base_path('.git');

        if (! $this->filesystem->isDirectory($gitDirectory)) {
            $this->error('Unable to locate the .git directory. Are you inside a Git repository?');

            return self::FAILURE;
        }

        $hooksDirectory = $gitDirectory.DIRECTORY_SEPARATOR.'hooks';
        $this->ensureDirectoryExists($hooksDirectory);

        $hookPath = $hooksDirectory.DIRECTORY_SEPARATOR.'pre-commit';
        $hookContents = <<<'HOOK'
#!/bin/sh
# Generated by git:backup-staged command
php artisan git:backup-staged
HOOK;

        if ($this->filesystem->exists($hookPath)) {
            $existingContents = $this->filesystem->get($hookPath);

            if (str_contains($existingContents, 'php artisan git:backup-staged')) {
                $this->info('Pre-commit hook already configured.');

                return self::SUCCESS;
            }

            $this->warn('A pre-commit hook already exists. Append the following manually:');
            $this->line('    php artisan git:backup-staged');

            return self::FAILURE;
        }

        $this->filesystem->put($hookPath, $hookContents);
        $this->filesystem->chmod($hookPath, 0755);

        $this->info('Pre-commit hook installed.');

        return self::SUCCESS;
    }
}
